// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package issue845_test

import (
	mock "github.com/stretchr/testify/mock"
)

// NewWithFix creates a new instance of WithFix. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithFix(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithFix {
	mock := &WithFix{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WithFix is an autogenerated mock type for the Interface type
type WithFix struct {
	mock.Mock
}

type WithFix_Expecter struct {
	mock *mock.Mock
}

func (_m *WithFix) EXPECT() *WithFix_Expecter {
	return &WithFix_Expecter{mock: &_m.Mock}
}

// Foo provides a mock function for the type WithFix
func (_mock *WithFix) Foo() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Foo")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// WithFix_Foo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Foo'
type WithFix_Foo_Call struct {
	*mock.Call
}

// Foo is a helper method to define mock.On call
func (_e *WithFix_Expecter) Foo() *WithFix_Foo_Call {
	return &WithFix_Foo_Call{Call: _e.mock.On("Foo")}
}

func (_c *WithFix_Foo_Call) Run(run func()) *WithFix_Foo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WithFix_Foo_Call) Return(sOutParam string) *WithFix_Foo_Call {
	_c.Call.Return(sOutParam)
	return _c
}

func (_c *WithFix_Foo_Call) RunAndReturn(run func() string) *WithFix_Foo_Call {
	_c.Call.Return(run)
	return _c
}
