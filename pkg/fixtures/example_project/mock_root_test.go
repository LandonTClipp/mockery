// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package example_project_test

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/vektra/mockery/v2/pkg/fixtures/example_project/foo"
)

// NewMockRoot creates a new instance of MockRoot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoot {
	mock := &MockRoot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoot is an autogenerated mock type for the Root type
type MockRoot struct {
	mock.Mock
}

// ReturnsFoo provides a mock function for the type MockRoot
func (_mock *MockRoot) ReturnsFoo() (foo.Foo, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnsFoo")
	}

	var r0 foo.Foo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (foo.Foo, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() foo.Foo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foo.Foo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TakesBaz provides a mock function for the type MockRoot
func (_mock *MockRoot) TakesBaz(baz *foo.Baz) {
	_mock.Called(baz)
	return
}

type MockRoot_expecter struct {
	mock *mock.Mock
}

func (_m *MockRoot) EXPECT() *MockRoot_expecter {
	return &MockRoot_expecter{mock: &_m.Mock}
}
