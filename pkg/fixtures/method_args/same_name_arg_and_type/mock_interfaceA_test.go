// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package same_name_arg_and_type

import (
	mock "github.com/stretchr/testify/mock"
)

// NewinterfaceAMock creates a new instance of interfaceAMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewinterfaceAMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *interfaceAMock {
	mock := &interfaceAMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// interfaceAMock is an autogenerated mock type for the interfaceA type
type interfaceAMock struct {
	mock.Mock
}

// DoB provides a mock function for the type interfaceAMock
func (_mock *interfaceAMock) DoB(interfaceB same_name_arg_and_type.interfaceB) same_name_arg_and_type.interfaceB {
	ret := _mock.Called(interfaceB)

	if len(ret) == 0 {
		panic("no return value specified for DoB")
	}

	var r0 same_name_arg_and_type.interfaceB
	if returnFunc, ok := ret.Get(0).(func(same_name_arg_and_type.interfaceB) same_name_arg_and_type.interfaceB); ok {
		r0 = returnFunc(interfaceB)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(same_name_arg_and_type.interfaceB)
		}
	}
	return r0
}

// DoB0 provides a mock function for the type interfaceAMock
func (_mock *interfaceAMock) DoB0(interfaceB same_name_arg_and_type.interfaceB0) same_name_arg_and_type.interfaceB0 {
	ret := _mock.Called(interfaceB)

	if len(ret) == 0 {
		panic("no return value specified for DoB0")
	}

	var r0 same_name_arg_and_type.interfaceB0
	if returnFunc, ok := ret.Get(0).(func(same_name_arg_and_type.interfaceB0) same_name_arg_and_type.interfaceB0); ok {
		r0 = returnFunc(interfaceB)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(same_name_arg_and_type.interfaceB0)
		}
	}
	return r0
}

// DoB0v2 provides a mock function for the type interfaceAMock
func (_mock *interfaceAMock) DoB0v2(interfaceB0 same_name_arg_and_type.interfaceB0) same_name_arg_and_type.interfaceB0 {
	ret := _mock.Called(interfaceB0)

	if len(ret) == 0 {
		panic("no return value specified for DoB0v2")
	}

	var r0 same_name_arg_and_type.interfaceB0
	if returnFunc, ok := ret.Get(0).(func(same_name_arg_and_type.interfaceB0) same_name_arg_and_type.interfaceB0); ok {
		r0 = returnFunc(interfaceB0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(same_name_arg_and_type.interfaceB0)
		}
	}
	return r0
}

type interfaceAMock_expecter struct {
	mock *mock.Mock
}

func (_m *interfaceAMock) EXPECT() *interfaceAMock_expecter {
	return &interfaceAMock_expecter{mock: &_m.Mock}
}
