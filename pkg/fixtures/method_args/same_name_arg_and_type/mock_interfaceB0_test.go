// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package same_name_arg_and_type

import (
	mock "github.com/stretchr/testify/mock"
)

// NewinterfaceB0Mock creates a new instance of interfaceB0Mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewinterfaceB0Mock(t interface {
	mock.TestingT
	Cleanup(func())
}) *interfaceB0Mock {
	mock := &interfaceB0Mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// interfaceB0Mock is an autogenerated mock type for the interfaceB0 type
type interfaceB0Mock struct {
	mock.Mock
}

// DoB0 provides a mock function for the type interfaceB0Mock
func (_mock *interfaceB0Mock) DoB0(interfaceB0 same_name_arg_and_type.interfaceB0) same_name_arg_and_type.interfaceB0 {
	ret := _mock.Called(interfaceB0)

	if len(ret) == 0 {
		panic("no return value specified for DoB0")
	}

	var r0 same_name_arg_and_type.interfaceB0
	if returnFunc, ok := ret.Get(0).(func(same_name_arg_and_type.interfaceB0) same_name_arg_and_type.interfaceB0); ok {
		r0 = returnFunc(interfaceB0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(same_name_arg_and_type.interfaceB0)
		}
	}
	return r0
}

type interfaceB0Mock_expecter struct {
	mock *mock.Mock
}

func (_m *interfaceB0Mock) EXPECT() *interfaceB0Mock_expecter {
	return &interfaceB0Mock_expecter{mock: &_m.Mock}
}
