// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package same_name_arg_and_type

import (
	mock "github.com/stretchr/testify/mock"
)

// NewinterfaceBMock creates a new instance of interfaceBMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewinterfaceBMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *interfaceBMock {
	mock := &interfaceBMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// interfaceBMock is an autogenerated mock type for the interfaceB type
type interfaceBMock struct {
	mock.Mock
}

type interfaceBMock_Expecter struct {
	mock *mock.Mock
}

func (_m *interfaceBMock) EXPECT() *interfaceBMock_Expecter {
	return &interfaceBMock_Expecter{mock: &_m.Mock}
}

// GetData provides a mock function for the type interfaceBMock
func (_mock *interfaceBMock) GetData() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// interfaceBMock_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type interfaceBMock_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
func (_e *interfaceBMock_Expecter) GetData() *interfaceBMock_GetData_Call {
	return &interfaceBMock_GetData_Call{Call: _e.mock.On("GetData")}
}

func (_c *interfaceBMock_GetData_Call) Run(run func()) *interfaceBMock_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *interfaceBMock_GetData_Call) Return(nOut int) *interfaceBMock_GetData_Call {
	_c.Call.Return(nOut)
	return _c
}

func (_c *interfaceBMock_GetData_Call) RunAndReturn(run func() int) *interfaceBMock_GetData_Call {
	_c.Call.Return(run)
	return _c
}
