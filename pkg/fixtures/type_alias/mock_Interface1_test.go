// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package type_alias_test

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/vektra/mockery/v2/pkg/fixtures/type_alias"
)

// NewInterface1 creates a new instance of Interface1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface1(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface1 {
	mock := &Interface1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Interface1 is an autogenerated mock type for the Interface1 type
type Interface1 struct {
	mock.Mock
}

// Foo provides a mock function for the type Interface1
func (_mock *Interface1) Foo() type_alias.Type {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Foo")
	}

	var r0 type_alias.Type
	if returnFunc, ok := ret.Get(0).(func() type_alias.Type); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(type_alias.Type)
	}
	return r0
}

type Interface1_expecter struct {
	mock *mock.Mock
}

func (_m *Interface1) EXPECT() *Interface1_expecter {
	return &Interface1_expecter{mock: &_m.Mock}
}
