// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package index_list_expr_test

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockGenericMultipleTypes creates a new instance of MockGenericMultipleTypes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenericMultipleTypes[T1 any, T2 any, T3 any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenericMultipleTypes[T1, T2, T3] {
	mock := &MockGenericMultipleTypes[T1, T2, T3]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenericMultipleTypes is an autogenerated mock type for the GenericMultipleTypes type
type MockGenericMultipleTypes[T1 any, T2 any, T3 any] struct {
	mock.Mock
}

// Func provides a mock function for the type MockGenericMultipleTypes
func (_mock *MockGenericMultipleTypes[T1, T2, T3]) Func(arg1 *T1, arg2 T2) T3 {
	ret := _mock.Called(arg1, arg2)

	if len(ret) == 0 {
		panic("no return value specified for Func")
	}

	var r0 T3
	if returnFunc, ok := ret.Get(0).(func(*T1, T2) T3); ok {
		r0 = returnFunc(arg1, arg2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T3)
		}
	}
	return r0
}

type MockGenericMultipleTypes_expecter[T1 any, T2 any, T3 any] struct {
	mock *mock.Mock
}

func (_m *MockGenericMultipleTypes[T1, T2, T3]) EXPECT() *MockGenericMultipleTypes_expecter[T1, T2, T3] {
	return &MockGenericMultipleTypes_expecter[T1, T2, T3]{mock: &_m.Mock}
}
