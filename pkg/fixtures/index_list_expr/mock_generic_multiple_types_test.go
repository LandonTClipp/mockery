// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package index_list_expr_test

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockGenericMultipleTypes creates a new instance of MockGenericMultipleTypes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenericMultipleTypes[T1Param any, T2Param any, T3Param any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenericMultipleTypes[T1Param, T2Param, T3Param] {
	mock := &MockGenericMultipleTypes[T1Param, T2Param, T3Param]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenericMultipleTypes is an autogenerated mock type for the GenericMultipleTypes type
type MockGenericMultipleTypes[T1Param any, T2Param any, T3Param any] struct {
	mock.Mock
}

type MockGenericMultipleTypes_Expecter[T1Param any, T2Param any, T3Param any] struct {
	mock *mock.Mock
}

func (_m *MockGenericMultipleTypes[T1Param, T2Param, T3Param]) EXPECT() *MockGenericMultipleTypes_Expecter[T1Param, T2Param, T3Param] {
	return &MockGenericMultipleTypes_Expecter[T1Param, T2Param, T3Param]{mock: &_m.Mock}
}

// Func provides a mock function for the type MockGenericMultipleTypes
func (_mock *MockGenericMultipleTypes[T1Param, T2Param, T3Param]) Func(arg1Param *T1, arg2Param T2) T3 {
	ret := _mock.Called(arg1Param, arg2Param)

	if len(ret) == 0 {
		panic("no return value specified for Func")
	}

	var r0 T3
	if returnFunc, ok := ret.Get(0).(func(*T1, T2) T3); ok {
		r0 = returnFunc(arg1Param, arg2Param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T3)
		}
	}
	return r0
}

// MockGenericMultipleTypes_Func_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Func'
type MockGenericMultipleTypes_Func_Call[T1Param any, T2Param any, T3Param any] struct {
	*mock.Call
}

// Func is a helper method to define mock.On call
//   - arg1Param
//   - arg2Param
func (_e *MockGenericMultipleTypes_Expecter[T1Param, T2Param, T3Param]) Func(arg1Param interface{}, arg2Param interface{}) *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param] {
	return &MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param]{Call: _e.mock.On("Func", arg1Param, arg2Param)}
}

func (_c *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param]) Run(run func(arg1Param *T1, arg2Param T2)) *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T1), args[1].(T2))
	})
	return _c
}

func (_c *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param]) Return(vOutParam T3) *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param] {
	_c.Call.Return(vOutParam)
	return _c
}

func (_c *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param]) RunAndReturn(run func(arg1Param *T1, arg2Param T2) T3) *MockGenericMultipleTypes_Func_Call[T1Param, T2Param, T3Param] {
	_c.Call.Return(run)
	return _c
}
