{{ .Boilerplate }}
// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

{{- if .BuildTags }}

//go:build {{ .BuildTags }}
{{- end }}

package {{.PkgName}}

import (
{{- range .Imports}}
	{{. | ImportStatement}}
{{- end}}
    mock "github.com/stretchr/testify/mock"
)

{{- range $i, $mock := .Mocks }}
// New{{ .MockName }} creates a new instance of {{ .MockName }}. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func New{{ .MockName }}{{ $mock | TypeConstraint }} (t interface {
	mock.TestingT
	Cleanup(func())
}) *{{ .MockName }}{{ $mock | TypeInstantiation }} {
	mock := &{{ .MockName }}{{ $mock | TypeInstantiation }}{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// {{ .MockName }} is an autogenerated mock type for the {{ .InterfaceName }} type
type {{ .MockName }}{{ $mock | TypeConstraint }} struct {
	mock.Mock
}

type {{.MockName}}_expecter{{ $mock | TypeConstraint }} struct {
	mock *mock.Mock
}

func (_m *{{.MockName}}{{ $mock | TypeInstantiation }}) EXPECT() *{{.MockName}}_expecter{{ $mock | TypeInstantiation }} {
	return &{{.MockName}}_expecter{{ $mock | TypeInstantiation }}{mock: &_m.Mock}
}
{{- end }}

