
// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package type_alias_test

import (
	"github.com/vektra/mockery/v3/internal/fixtures/type_alias"
	"github.com/vektra/mockery/v3/internal/fixtures/type_alias/subpkg"
    mock "github.com/stretchr/testify/mock"
)

 
// NewInterface2 creates a new instance of Interface2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface2 (t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface2 {
	mock := &Interface2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}


// Interface2 is an autogenerated mock type for the Interface2 type
type Interface2 struct {
	mock.Mock
}

type Interface2_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface2) EXPECT() *Interface2_Expecter {
	return &Interface2_Expecter{mock: &_m.Mock}
}

 

// F provides a mock function for the type Interface2
func (_mock *Interface2) F(v type_alias.Type, v1 type_alias.S, s subpkg.S)  {  _mock.Called(v, v1, s)
	return 
}



// Interface2_F_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'F'
type Interface2_F_Call struct {
	*mock.Call
}



// F is a helper method to define mock.On call
//  - v
//  - v1
//  - s
func (_e *Interface2_Expecter) F(v interface{}, v1 interface{}, s interface{}, ) *Interface2_F_Call {
	return &Interface2_F_Call{Call: _e.mock.On("F",v,v1,s, )}
}

func (_c *Interface2_F_Call) Run(run func(v type_alias.Type, v1 type_alias.S, s subpkg.S)) *Interface2_F_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(type_alias.Type),args[1].(type_alias.S),args[2].(subpkg.S),)
	})
	return _c
}

func (_c *Interface2_F_Call) Return() *Interface2_F_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface2_F_Call) RunAndReturn(run func(v type_alias.Type, v1 type_alias.S, s subpkg.S)) *Interface2_F_Call {
	_c.Run(run)
	return _c
}
  

