// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// TEST MOCKERY BOILERPLATE

package comment

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockIfaceWithCustomBuildTagInComment creates a new instance of MockIfaceWithCustomBuildTagInComment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIfaceWithCustomBuildTagInComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIfaceWithCustomBuildTagInComment {
	mock := &MockIfaceWithCustomBuildTagInComment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIfaceWithCustomBuildTagInComment is an autogenerated mock type for the IfaceWithCustomBuildTagInComment type
type MockIfaceWithCustomBuildTagInComment struct {
	mock.Mock
}

type MockIfaceWithCustomBuildTagInComment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIfaceWithCustomBuildTagInComment) EXPECT() *MockIfaceWithCustomBuildTagInComment_Expecter {
	return &MockIfaceWithCustomBuildTagInComment_Expecter{mock: &_m.Mock}
}

// Custom2 provides a mock function for the type MockIfaceWithCustomBuildTagInComment
func (_mock *MockIfaceWithCustomBuildTagInComment) Custom2() {
	_mock.Called()
	return
}

// MockIfaceWithCustomBuildTagInComment_Custom2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Custom2'
type MockIfaceWithCustomBuildTagInComment_Custom2_Call struct {
	*mock.Call
}

// Custom2 is a helper method to define mock.On call
func (_e *MockIfaceWithCustomBuildTagInComment_Expecter) Custom2() *MockIfaceWithCustomBuildTagInComment_Custom2_Call {
	return &MockIfaceWithCustomBuildTagInComment_Custom2_Call{Call: _e.mock.On("Custom2")}
}

func (_c *MockIfaceWithCustomBuildTagInComment_Custom2_Call) Run(run func()) *MockIfaceWithCustomBuildTagInComment_Custom2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIfaceWithCustomBuildTagInComment_Custom2_Call) Return() *MockIfaceWithCustomBuildTagInComment_Custom2_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIfaceWithCustomBuildTagInComment_Custom2_Call) RunAndReturn(run func()) *MockIfaceWithCustomBuildTagInComment_Custom2_Call {
	_c.Run(run)
	return _c
}

// Sprintf provides a mock function for the type MockIfaceWithCustomBuildTagInComment
func (_mock *MockIfaceWithCustomBuildTagInComment) Sprintf(format string, a ...interface{}) string {
	var tmpRet mock.Arguments
	if len(a) > 0 {
		tmpRet = _mock.Called(format, a)
	} else {
		tmpRet = _mock.Called(format)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Sprintf")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIfaceWithCustomBuildTagInComment_Sprintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintf'
type MockIfaceWithCustomBuildTagInComment_Sprintf_Call struct {
	*mock.Call
}

// Sprintf is a helper method to define mock.On call
//   - format
//   - a
func (_e *MockIfaceWithCustomBuildTagInComment_Expecter) Sprintf(format interface{}, a ...interface{}) *MockIfaceWithCustomBuildTagInComment_Sprintf_Call {
	return &MockIfaceWithCustomBuildTagInComment_Sprintf_Call{Call: _e.mock.On("Sprintf",
		append([]interface{}{format}, a...)...)}
}

func (_c *MockIfaceWithCustomBuildTagInComment_Sprintf_Call) Run(run func(format string, a ...interface{})) *MockIfaceWithCustomBuildTagInComment_Sprintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockIfaceWithCustomBuildTagInComment_Sprintf_Call) Return(s string) *MockIfaceWithCustomBuildTagInComment_Sprintf_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIfaceWithCustomBuildTagInComment_Sprintf_Call) RunAndReturn(run func(format string, a ...interface{}) string) *MockIfaceWithCustomBuildTagInComment_Sprintf_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIfaceWithBuildTagInComment creates a new instance of MockIfaceWithBuildTagInComment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIfaceWithBuildTagInComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIfaceWithBuildTagInComment {
	mock := &MockIfaceWithBuildTagInComment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIfaceWithBuildTagInComment is an autogenerated mock type for the IfaceWithBuildTagInComment type
type MockIfaceWithBuildTagInComment struct {
	mock.Mock
}

type MockIfaceWithBuildTagInComment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIfaceWithBuildTagInComment) EXPECT() *MockIfaceWithBuildTagInComment_Expecter {
	return &MockIfaceWithBuildTagInComment_Expecter{mock: &_m.Mock}
}

// Sprintf provides a mock function for the type MockIfaceWithBuildTagInComment
func (_mock *MockIfaceWithBuildTagInComment) Sprintf(format string, a ...interface{}) string {
	var tmpRet mock.Arguments
	if len(a) > 0 {
		tmpRet = _mock.Called(format, a)
	} else {
		tmpRet = _mock.Called(format)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Sprintf")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIfaceWithBuildTagInComment_Sprintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintf'
type MockIfaceWithBuildTagInComment_Sprintf_Call struct {
	*mock.Call
}

// Sprintf is a helper method to define mock.On call
//   - format
//   - a
func (_e *MockIfaceWithBuildTagInComment_Expecter) Sprintf(format interface{}, a ...interface{}) *MockIfaceWithBuildTagInComment_Sprintf_Call {
	return &MockIfaceWithBuildTagInComment_Sprintf_Call{Call: _e.mock.On("Sprintf",
		append([]interface{}{format}, a...)...)}
}

func (_c *MockIfaceWithBuildTagInComment_Sprintf_Call) Run(run func(format string, a ...interface{})) *MockIfaceWithBuildTagInComment_Sprintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockIfaceWithBuildTagInComment_Sprintf_Call) Return(s string) *MockIfaceWithBuildTagInComment_Sprintf_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIfaceWithBuildTagInComment_Sprintf_Call) RunAndReturn(run func(format string, a ...interface{}) string) *MockIfaceWithBuildTagInComment_Sprintf_Call {
	_c.Call.Return(run)
	return _c
}
