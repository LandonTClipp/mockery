// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// NewVariadic creates a new instance of Variadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *Variadic {
	mock := &Variadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Variadic is an autogenerated mock type for the Variadic type
type Variadic struct {
	mock.Mock
}

type Variadic_Expecter struct {
	mock *mock.Mock
}

func (_m *Variadic) EXPECT() *Variadic_Expecter {
	return &Variadic_Expecter{mock: &_m.Mock}
}

// VariadicFunction provides a mock function for the type Variadic
func (_mock *Variadic) VariadicFunction(strParam string, vFuncParam test.VariadicFunction) error {
	ret := _mock.Called(strParam, vFuncParam)

	if len(ret) == 0 {
		panic("no return value specified for VariadicFunction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, test.VariadicFunction) error); ok {
		r0 = returnFunc(strParam, vFuncParam)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Variadic_VariadicFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VariadicFunction'
type Variadic_VariadicFunction_Call struct {
	*mock.Call
}

// VariadicFunction is a helper method to define mock.On call
//   - strParam
//   - vFuncParam
func (_e *Variadic_Expecter) VariadicFunction(strParam interface{}, vFuncParam interface{}) *Variadic_VariadicFunction_Call {
	return &Variadic_VariadicFunction_Call{Call: _e.mock.On("VariadicFunction", strParam, vFuncParam)}
}

func (_c *Variadic_VariadicFunction_Call) Run(run func(strParam string, vFuncParam test.VariadicFunction)) *Variadic_VariadicFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(test.VariadicFunction))
	})
	return _c
}

func (_c *Variadic_VariadicFunction_Call) Return(errOutParam error) *Variadic_VariadicFunction_Call {
	_c.Call.Return(errOutParam)
	return _c
}

func (_c *Variadic_VariadicFunction_Call) RunAndReturn(run func(strParam string, vFuncParam test.VariadicFunction) error) *Variadic_VariadicFunction_Call {
	_c.Call.Return(run)
	return _c
}
