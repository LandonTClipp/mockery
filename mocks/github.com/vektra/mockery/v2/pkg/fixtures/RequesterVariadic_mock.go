// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewRequesterVariadic creates a new instance of RequesterVariadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequesterVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequesterVariadic {
	mock := &RequesterVariadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RequesterVariadic is an autogenerated mock type for the RequesterVariadic type
type RequesterVariadic struct {
	mock.Mock
}

// Get provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) Get(values ...string) bool {
	// string
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(...string) bool); ok {
		r0 = returnFunc(values...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MultiWriteToFile provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) MultiWriteToFile(filename string, w ...io.Writer) string {
	// io.Writer
	_va := make([]interface{}, len(w))
	for _i := range w {
		_va[_i] = w[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiWriteToFile")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {
		r0 = returnFunc(filename, w...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// OneInterface provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) OneInterface(a ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, a...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OneInterface")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = returnFunc(a...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Sprintf provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) Sprintf(format string, a ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sprintf")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

type RequesterVariadic_expecter struct {
	mock *mock.Mock
}

func (_m *RequesterVariadic) EXPECT() *RequesterVariadic_expecter {
	return &RequesterVariadic_expecter{mock: &_m.Mock}
}
