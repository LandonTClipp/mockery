// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewRequesterVariadic creates a new instance of RequesterVariadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequesterVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequesterVariadic {
	mock := &RequesterVariadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RequesterVariadic is an autogenerated mock type for the RequesterVariadic type
type RequesterVariadic struct {
	mock.Mock
}

type RequesterVariadic_Expecter struct {
	mock *mock.Mock
}

func (_m *RequesterVariadic) EXPECT() *RequesterVariadic_Expecter {
	return &RequesterVariadic_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) Get(valuesParam ...string) bool {
	// string
	_va := make([]interface{}, len(valuesParam))
	for _i := range valuesParam {
		_va[_i] = valuesParam[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(...string) bool); ok {
		r0 = returnFunc(valuesParam...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// RequesterVariadic_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RequesterVariadic_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - valuesParam
func (_e *RequesterVariadic_Expecter) Get(valuesParam ...interface{}) *RequesterVariadic_Get_Call {
	return &RequesterVariadic_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{}, valuesParam...)...)}
}

func (_c *RequesterVariadic_Get_Call) Run(run func(valuesParam ...string)) *RequesterVariadic_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *RequesterVariadic_Get_Call) Return(bOutParam bool) *RequesterVariadic_Get_Call {
	_c.Call.Return(bOutParam)
	return _c
}

func (_c *RequesterVariadic_Get_Call) RunAndReturn(run func(valuesParam ...string) bool) *RequesterVariadic_Get_Call {
	_c.Call.Return(run)
	return _c
}

// MultiWriteToFile provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) MultiWriteToFile(filenameParam string, wParam ...io.Writer) string {
	// io.Writer
	_va := make([]interface{}, len(wParam))
	for _i := range wParam {
		_va[_i] = wParam[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filenameParam)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiWriteToFile")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {
		r0 = returnFunc(filenameParam, wParam...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// RequesterVariadic_MultiWriteToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiWriteToFile'
type RequesterVariadic_MultiWriteToFile_Call struct {
	*mock.Call
}

// MultiWriteToFile is a helper method to define mock.On call
//   - filenameParam
//   - wParam
func (_e *RequesterVariadic_Expecter) MultiWriteToFile(filenameParam interface{}, wParam ...interface{}) *RequesterVariadic_MultiWriteToFile_Call {
	return &RequesterVariadic_MultiWriteToFile_Call{Call: _e.mock.On("MultiWriteToFile",
		append([]interface{}{filenameParam}, wParam...)...)}
}

func (_c *RequesterVariadic_MultiWriteToFile_Call) Run(run func(filenameParam string, wParam ...io.Writer)) *RequesterVariadic_MultiWriteToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]io.Writer, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(io.Writer)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *RequesterVariadic_MultiWriteToFile_Call) Return(sOutParam string) *RequesterVariadic_MultiWriteToFile_Call {
	_c.Call.Return(sOutParam)
	return _c
}

func (_c *RequesterVariadic_MultiWriteToFile_Call) RunAndReturn(run func(filenameParam string, wParam ...io.Writer) string) *RequesterVariadic_MultiWriteToFile_Call {
	_c.Call.Return(run)
	return _c
}

// OneInterface provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) OneInterface(aParam ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, aParam...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OneInterface")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = returnFunc(aParam...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// RequesterVariadic_OneInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneInterface'
type RequesterVariadic_OneInterface_Call struct {
	*mock.Call
}

// OneInterface is a helper method to define mock.On call
//   - aParam
func (_e *RequesterVariadic_Expecter) OneInterface(aParam ...interface{}) *RequesterVariadic_OneInterface_Call {
	return &RequesterVariadic_OneInterface_Call{Call: _e.mock.On("OneInterface",
		append([]interface{}{}, aParam...)...)}
}

func (_c *RequesterVariadic_OneInterface_Call) Run(run func(aParam ...interface{})) *RequesterVariadic_OneInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *RequesterVariadic_OneInterface_Call) Return(bOutParam bool) *RequesterVariadic_OneInterface_Call {
	_c.Call.Return(bOutParam)
	return _c
}

func (_c *RequesterVariadic_OneInterface_Call) RunAndReturn(run func(aParam ...interface{}) bool) *RequesterVariadic_OneInterface_Call {
	_c.Call.Return(run)
	return _c
}

// Sprintf provides a mock function for the type RequesterVariadic
func (_mock *RequesterVariadic) Sprintf(formatParam string, aParam ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, formatParam)
	_ca = append(_ca, aParam...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sprintf")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = returnFunc(formatParam, aParam...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// RequesterVariadic_Sprintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintf'
type RequesterVariadic_Sprintf_Call struct {
	*mock.Call
}

// Sprintf is a helper method to define mock.On call
//   - formatParam
//   - aParam
func (_e *RequesterVariadic_Expecter) Sprintf(formatParam interface{}, aParam ...interface{}) *RequesterVariadic_Sprintf_Call {
	return &RequesterVariadic_Sprintf_Call{Call: _e.mock.On("Sprintf",
		append([]interface{}{formatParam}, aParam...)...)}
}

func (_c *RequesterVariadic_Sprintf_Call) Run(run func(formatParam string, aParam ...interface{})) *RequesterVariadic_Sprintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *RequesterVariadic_Sprintf_Call) Return(sOutParam string) *RequesterVariadic_Sprintf_Call {
	_c.Call.Return(sOutParam)
	return _c
}

func (_c *RequesterVariadic_Sprintf_Call) RunAndReturn(run func(formatParam string, aParam ...interface{}) string) *RequesterVariadic_Sprintf_Call {
	_c.Call.Return(run)
	return _c
}
