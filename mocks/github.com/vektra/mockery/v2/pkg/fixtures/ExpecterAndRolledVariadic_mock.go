// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewExpecterAndRolledVariadic creates a new instance of ExpecterAndRolledVariadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpecterAndRolledVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpecterAndRolledVariadic {
	mock := &ExpecterAndRolledVariadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExpecterAndRolledVariadic is an autogenerated mock type for the Expecter type
type ExpecterAndRolledVariadic struct {
	mock.Mock
}

// ManyArgsReturns provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) ManyArgsReturns(str string, i int) ([]string, error) {
	ret := _mock.Called(str, i)

	if len(ret) == 0 {
		panic("no return value specified for ManyArgsReturns")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {
		return returnFunc(str, i)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = returnFunc(str, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(str, i)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NoArg provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) NoArg() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoArg")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// NoReturn provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) NoReturn(str string) {
	_mock.Called(str)
	return
}

// Variadic provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) Variadic(ints ...int) error {
	var tmpRet mock.Arguments
	if len(ints) > 0 {
		tmpRet = _mock.Called(ints)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Variadic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...int) error); ok {
		r0 = returnFunc(ints...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VariadicMany provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) VariadicMany(i int, a string, intfs ...interface{}) error {
	var tmpRet mock.Arguments
	if len(intfs) > 0 {
		tmpRet = _mock.Called(i, a, intfs)
	} else {
		tmpRet = _mock.Called(i, a)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for VariadicMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {
		r0 = returnFunc(i, a, intfs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

type ExpecterAndRolledVariadic_expecter struct {
	mock *mock.Mock
}

func (_m *ExpecterAndRolledVariadic) EXPECT() *ExpecterAndRolledVariadic_expecter {
	return &ExpecterAndRolledVariadic_expecter{mock: &_m.Mock}
}
