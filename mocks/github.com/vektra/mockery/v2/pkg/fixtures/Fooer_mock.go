// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewFooer creates a new instance of Fooer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFooer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Fooer {
	mock := &Fooer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Fooer is an autogenerated mock type for the Fooer type
type Fooer struct {
	mock.Mock
}

// Bar provides a mock function for the type Fooer
func (_mock *Fooer) Bar(f func([]int)) {
	_mock.Called(f)
	return
}

// Baz provides a mock function for the type Fooer
func (_mock *Fooer) Baz(path string) func(x string) string {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Baz")
	}

	var r0 func(x string) string
	if returnFunc, ok := ret.Get(0).(func(string) func(x string) string); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(x string) string)
		}
	}
	return r0
}

// Foo provides a mock function for the type Fooer
func (_mock *Fooer) Foo(f func(x string) string) error {
	ret := _mock.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for Foo")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(x string) string) error); ok {
		r0 = returnFunc(f)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

type Fooer_expecter struct {
	mock *mock.Mock
}

func (_m *Fooer) EXPECT() *Fooer_expecter {
	return &Fooer_expecter{mock: &_m.Mock}
}
