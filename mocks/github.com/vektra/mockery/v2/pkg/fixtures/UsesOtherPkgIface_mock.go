// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// NewUsesOtherPkgIface creates a new instance of UsesOtherPkgIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsesOtherPkgIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsesOtherPkgIface {
	mock := &UsesOtherPkgIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsesOtherPkgIface is an autogenerated mock type for the UsesOtherPkgIface type
type UsesOtherPkgIface struct {
	mock.Mock
}

type UsesOtherPkgIface_Expecter struct {
	mock *mock.Mock
}

func (_m *UsesOtherPkgIface) EXPECT() *UsesOtherPkgIface_Expecter {
	return &UsesOtherPkgIface_Expecter{mock: &_m.Mock}
}

// DoSomethingElse provides a mock function for the type UsesOtherPkgIface
func (_mock *UsesOtherPkgIface) DoSomethingElse(objParam test.Sibling) {
	_mock.Called(objParam)
	return
}

// UsesOtherPkgIface_DoSomethingElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoSomethingElse'
type UsesOtherPkgIface_DoSomethingElse_Call struct {
	*mock.Call
}

// DoSomethingElse is a helper method to define mock.On call
//   - objParam
func (_e *UsesOtherPkgIface_Expecter) DoSomethingElse(objParam interface{}) *UsesOtherPkgIface_DoSomethingElse_Call {
	return &UsesOtherPkgIface_DoSomethingElse_Call{Call: _e.mock.On("DoSomethingElse", objParam)}
}

func (_c *UsesOtherPkgIface_DoSomethingElse_Call) Run(run func(objParam test.Sibling)) *UsesOtherPkgIface_DoSomethingElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(test.Sibling))
	})
	return _c
}

func (_c *UsesOtherPkgIface_DoSomethingElse_Call) Return() *UsesOtherPkgIface_DoSomethingElse_Call {
	_c.Call.Return()
	return _c
}

func (_c *UsesOtherPkgIface_DoSomethingElse_Call) RunAndReturn(run func(objParam test.Sibling)) *UsesOtherPkgIface_DoSomethingElse_Call {
	_c.Run(run)
	return _c
}
