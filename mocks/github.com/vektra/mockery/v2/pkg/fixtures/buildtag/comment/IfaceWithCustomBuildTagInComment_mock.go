// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

//go:build custom3 && (!windows || !darwin || !freebsd)

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewIfaceWithCustomBuildTagInComment creates a new instance of IfaceWithCustomBuildTagInComment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIfaceWithCustomBuildTagInComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *IfaceWithCustomBuildTagInComment {
	mock := &IfaceWithCustomBuildTagInComment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IfaceWithCustomBuildTagInComment is an autogenerated mock type for the IfaceWithCustomBuildTagInComment type
type IfaceWithCustomBuildTagInComment struct {
	mock.Mock
}

// Custom2 provides a mock function for the type IfaceWithCustomBuildTagInComment
func (_mock *IfaceWithCustomBuildTagInComment) Custom2() {
	_mock.Called()
	return
}

// Sprintf provides a mock function for the type IfaceWithCustomBuildTagInComment
func (_mock *IfaceWithCustomBuildTagInComment) Sprintf(format string, a ...interface{}) string {
	var tmpRet mock.Arguments
	if len(a) > 0 {
		tmpRet = _mock.Called(format, a)
	} else {
		tmpRet = _mock.Called(format)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Sprintf")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

type IfaceWithCustomBuildTagInComment_expecter struct {
	mock *mock.Mock
}

func (_m *IfaceWithCustomBuildTagInComment) EXPECT() *IfaceWithCustomBuildTagInComment_expecter {
	return &IfaceWithCustomBuildTagInComment_expecter{mock: &_m.Mock}
}
