// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	fixtures "github.com/vektra/mockery/v2/pkg/fixtures"
	redefinedtypeb "github.com/vektra/mockery/v2/pkg/fixtures/redefined_type_b"
)

// NewImportsSameAsPackage creates a new instance of ImportsSameAsPackage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImportsSameAsPackage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImportsSameAsPackage {
	mock := &ImportsSameAsPackage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ImportsSameAsPackage is an autogenerated mock type for the ImportsSameAsPackage type
type ImportsSameAsPackage struct {
	mock.Mock
}

// A provides a mock function for the type ImportsSameAsPackage
func (_mock *ImportsSameAsPackage) A() redefinedtypeb.B {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for A")
	}

	var r0 redefinedtypeb.B
	if returnFunc, ok := ret.Get(0).(func() redefinedtypeb.B); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(redefinedtypeb.B)
	}
	return r0
}

// B provides a mock function for the type ImportsSameAsPackage
func (_mock *ImportsSameAsPackage) B() fixtures.KeyManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for B")
	}

	var r0 fixtures.KeyManager
	if returnFunc, ok := ret.Get(0).(func() fixtures.KeyManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fixtures.KeyManager)
		}
	}
	return r0
}

// C provides a mock function for the type ImportsSameAsPackage
func (_mock *ImportsSameAsPackage) C(c fixtures.C) {
	_mock.Called(c)
	return
}

type ImportsSameAsPackage_expecter struct {
	mock *mock.Mock
}

func (_m *ImportsSameAsPackage) EXPECT() *ImportsSameAsPackage_expecter {
	return &ImportsSameAsPackage_expecter{mock: &_m.Mock}
}
