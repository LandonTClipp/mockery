// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAsyncProducer creates a new instance of AsyncProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncProducer {
	mock := &AsyncProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AsyncProducer is an autogenerated mock type for the AsyncProducer type
type AsyncProducer struct {
	mock.Mock
}

// Input provides a mock function for the type AsyncProducer
func (_mock *AsyncProducer) Input() chan<- bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Input")
	}

	var r0 chan<- bool
	if returnFunc, ok := ret.Get(0).(func() chan<- bool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- bool)
		}
	}
	return r0
}

// Output provides a mock function for the type AsyncProducer
func (_mock *AsyncProducer) Output() <-chan bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 <-chan bool
	if returnFunc, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}
	return r0
}

// Whatever provides a mock function for the type AsyncProducer
func (_mock *AsyncProducer) Whatever() chan bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Whatever")
	}

	var r0 chan bool
	if returnFunc, ok := ret.Get(0).(func() chan bool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}
	return r0
}

type AsyncProducer_expecter struct {
	mock *mock.Mock
}

func (_m *AsyncProducer) EXPECT() *AsyncProducer_expecter {
	return &AsyncProducer_expecter{mock: &_m.Mock}
}
