// TEST MOCKERY BOILERPLATE
// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

//go:build test

package mocks

import (
	"io"

	mock "github.com/stretchr/testify/mock"
	test "github.com/vektra/mockery/v2/pkg/fixtures"
	"github.com/vektra/mockery/v2/pkg/fixtures/constraints"
)

// NewExpecterAndRolledVariadic creates a new instance of ExpecterAndRolledVariadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpecterAndRolledVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpecterAndRolledVariadic {
	mock := &ExpecterAndRolledVariadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExpecterAndRolledVariadic is an autogenerated mock type for the Expecter type
type ExpecterAndRolledVariadic struct {
	mock.Mock
}

// ManyArgsReturns provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) ManyArgsReturns(str string, i int) ([]string, error) {
	ret := _mock.Called(str, i)

	if len(ret) == 0 {
		panic("no return value specified for ManyArgsReturns")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {
		return returnFunc(str, i)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = returnFunc(str, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(str, i)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NoArg provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) NoArg() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoArg")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// NoReturn provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) NoReturn(str string) {
	_mock.Called(str)
	return
}

// Variadic provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) Variadic(ints ...int) error {
	var tmpRet mock.Arguments
	if len(ints) > 0 {
		tmpRet = _mock.Called(ints)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Variadic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...int) error); ok {
		r0 = returnFunc(ints...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VariadicMany provides a mock function for the type ExpecterAndRolledVariadic
func (_mock *ExpecterAndRolledVariadic) VariadicMany(i int, a string, intfs ...interface{}) error {
	var tmpRet mock.Arguments
	if len(intfs) > 0 {
		tmpRet = _mock.Called(i, a, intfs)
	} else {
		tmpRet = _mock.Called(i, a)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for VariadicMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {
		r0 = returnFunc(i, a, intfs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

type ExpecterAndRolledVariadic_expecter struct {
	mock *mock.Mock
}

func (_m *ExpecterAndRolledVariadic) EXPECT() *ExpecterAndRolledVariadic_expecter {
	return &ExpecterAndRolledVariadic_expecter{mock: &_m.Mock}
}

// NewExpecter creates a new instance of Expecter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpecter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Expecter {
	mock := &Expecter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Expecter is an autogenerated mock type for the Expecter type
type Expecter struct {
	mock.Mock
}

// ManyArgsReturns provides a mock function for the type Expecter
func (_mock *Expecter) ManyArgsReturns(str string, i int) ([]string, error) {
	ret := _mock.Called(str, i)

	if len(ret) == 0 {
		panic("no return value specified for ManyArgsReturns")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {
		return returnFunc(str, i)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = returnFunc(str, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(str, i)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NoArg provides a mock function for the type Expecter
func (_mock *Expecter) NoArg() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoArg")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// NoReturn provides a mock function for the type Expecter
func (_mock *Expecter) NoReturn(str string) {
	_mock.Called(str)
	return
}

// Variadic provides a mock function for the type Expecter
func (_mock *Expecter) Variadic(ints ...int) error {
	// int
	_va := make([]interface{}, len(ints))
	for _i := range ints {
		_va[_i] = ints[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Variadic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...int) error); ok {
		r0 = returnFunc(ints...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VariadicMany provides a mock function for the type Expecter
func (_mock *Expecter) VariadicMany(i int, a string, intfs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, i, a)
	_ca = append(_ca, intfs...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VariadicMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {
		r0 = returnFunc(i, a, intfs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

type Expecter_expecter struct {
	mock *mock.Mock
}

func (_m *Expecter) EXPECT() *Expecter_expecter {
	return &Expecter_expecter{mock: &_m.Mock}
}

// NewMockRequesterGenerics creates a new instance of MockRequesterGenerics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequesterGenerics[TAny any, TComparable comparable, TSigned constraints.Signed, TIntf test.GetInt, TExternalIntf io.Writer, TGenIntf test.GetGeneric[TSigned], TInlineType interface{ ~int | ~uint }, TInlineTypeGeneric interface {
	~int | test.GenericType[int, test.GetInt]
	comparable
}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequesterGenerics[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric] {
	mock := &MockRequesterGenerics[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequesterGenerics is an autogenerated mock type for the RequesterGenerics type
type MockRequesterGenerics[TAny any, TComparable comparable, TSigned constraints.Signed, TIntf test.GetInt, TExternalIntf io.Writer, TGenIntf test.GetGeneric[TSigned], TInlineType interface{ ~int | ~uint }, TInlineTypeGeneric interface {
	~int | test.GenericType[int, test.GetInt]
	comparable
}] struct {
	mock.Mock
}

// GenericAnonymousStructs provides a mock function for the type MockRequesterGenerics
func (_mock *MockRequesterGenerics[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric]) GenericAnonymousStructs(val struct{ Type1 TExternalIntf }) struct {
	Type2 test.GenericType[string, test.EmbeddedGet[int]]
} {
	ret := _mock.Called(val)

	if len(ret) == 0 {
		panic("no return value specified for GenericAnonymousStructs")
	}

	var r0 struct {
		Type2 test.GenericType[string, test.EmbeddedGet[int]]
	}
	if returnFunc, ok := ret.Get(0).(func(struct{ Type1 TExternalIntf }) struct {
		Type2 test.GenericType[string, test.EmbeddedGet[int]]
	}); ok {
		r0 = returnFunc(val)
	} else {
		r0 = ret.Get(0).(struct {
			Type2 test.GenericType[string, test.EmbeddedGet[int]]
		})
	}
	return r0
}

// GenericArguments provides a mock function for the type MockRequesterGenerics
func (_mock *MockRequesterGenerics[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric]) GenericArguments(v1 TAny, v2 TComparable) (TSigned, TIntf) {
	ret := _mock.Called(v1, v2)

	if len(ret) == 0 {
		panic("no return value specified for GenericArguments")
	}

	var r0 TSigned
	var r1 TIntf
	if returnFunc, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {
		return returnFunc(v1, v2)
	}
	if returnFunc, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {
		r0 = returnFunc(v1, v2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TSigned)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {
		r1 = returnFunc(v1, v2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(TIntf)
		}
	}
	return r0, r1
}

// GenericStructs provides a mock function for the type MockRequesterGenerics
func (_mock *MockRequesterGenerics[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric]) GenericStructs(genericType test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf] {
	ret := _mock.Called(genericType)

	if len(ret) == 0 {
		panic("no return value specified for GenericStructs")
	}

	var r0 test.GenericType[TSigned, TIntf]
	if returnFunc, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {
		r0 = returnFunc(genericType)
	} else {
		r0 = ret.Get(0).(test.GenericType[TSigned, TIntf])
	}
	return r0
}

type MockRequesterGenerics_expecter[TAny any, TComparable comparable, TSigned constraints.Signed, TIntf test.GetInt, TExternalIntf io.Writer, TGenIntf test.GetGeneric[TSigned], TInlineType interface{ ~int | ~uint }, TInlineTypeGeneric interface {
	~int | test.GenericType[int, test.GetInt]
	comparable
}] struct {
	mock *mock.Mock
}

func (_m *MockRequesterGenerics[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric]) EXPECT() *MockRequesterGenerics_expecter[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric] {
	return &MockRequesterGenerics_expecter[TAny, TComparable, TSigned, TIntf, TExternalIntf, TGenIntf, TInlineType, TInlineTypeGeneric]{mock: &_m.Mock}
}

// NewMockA creates a new instance of MockA. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockA(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockA {
	mock := &MockA{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockA is an autogenerated mock type for the A type
type MockA struct {
	mock.Mock
}

// Call provides a mock function for the type MockA
func (_mock *MockA) Call() (test.B, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 test.B
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (test.B, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() test.B); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(test.B)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

type MockA_expecter struct {
	mock *mock.Mock
}

func (_m *MockA) EXPECT() *MockA_expecter {
	return &MockA_expecter{mock: &_m.Mock}
}
