// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewUsesAny creates a new instance of UsesAny. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsesAny(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsesAny {
	mock := &UsesAny{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsesAny is an autogenerated mock type for the UsesAny type
type UsesAny struct {
	mock.Mock
}

// GetReader provides a mock function for the type UsesAny
func (_mock *UsesAny) GetReader() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReader")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

type UsesAny_expecter struct {
	mock *mock.Mock
}

func (_m *UsesAny) EXPECT() *UsesAny_expecter {
	return &UsesAny_expecter{mock: &_m.Mock}
}
