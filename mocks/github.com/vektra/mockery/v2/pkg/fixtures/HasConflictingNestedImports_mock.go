// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
	my_http "github.com/vektra/mockery/v2/pkg/fixtures/http"
)

// NewHasConflictingNestedImports creates a new instance of HasConflictingNestedImports. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasConflictingNestedImports(t interface {
	mock.TestingT
	Cleanup(func())
}) *HasConflictingNestedImports {
	mock := &HasConflictingNestedImports{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HasConflictingNestedImports is an autogenerated mock type for the HasConflictingNestedImports type
type HasConflictingNestedImports struct {
	mock.Mock
}

// Get provides a mock function for the type HasConflictingNestedImports
func (_mock *HasConflictingNestedImports) Get(path string) (http.Response, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (http.Response, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) http.Response); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(http.Response)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Z provides a mock function for the type HasConflictingNestedImports
func (_mock *HasConflictingNestedImports) Z() my_http.MyStruct {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Z")
	}

	var r0 my_http.MyStruct
	if returnFunc, ok := ret.Get(0).(func() my_http.MyStruct); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(my_http.MyStruct)
	}
	return r0
}

type HasConflictingNestedImports_expecter struct {
	mock *mock.Mock
}

func (_m *HasConflictingNestedImports) EXPECT() *HasConflictingNestedImports_expecter {
	return &HasConflictingNestedImports_expecter{mock: &_m.Mock}
}
