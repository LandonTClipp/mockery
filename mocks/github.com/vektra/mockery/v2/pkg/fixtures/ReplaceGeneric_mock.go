// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/vektra/mockery/v2/pkg/fixtures/constraints"
)

// NewReplaceGeneric creates a new instance of ReplaceGeneric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplaceGeneric[TImport any, TConstraint constraints.Signed, TKeep any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplaceGeneric[TImport, TConstraint, TKeep] {
	mock := &ReplaceGeneric[TImport, TConstraint, TKeep]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ReplaceGeneric is an autogenerated mock type for the ReplaceGeneric type
type ReplaceGeneric[TImport any, TConstraint constraints.Signed, TKeep any] struct {
	mock.Mock
}

// A provides a mock function for the type ReplaceGeneric
func (_mock *ReplaceGeneric[TImport, TConstraint, TKeep]) A(t1 TImport) TKeep {
	ret := _mock.Called(t1)

	if len(ret) == 0 {
		panic("no return value specified for A")
	}

	var r0 TKeep
	if returnFunc, ok := ret.Get(0).(func(TImport) TKeep); ok {
		r0 = returnFunc(t1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TKeep)
		}
	}
	return r0
}

// B provides a mock function for the type ReplaceGeneric
func (_mock *ReplaceGeneric[TImport, TConstraint, TKeep]) B() TImport {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for B")
	}

	var r0 TImport
	if returnFunc, ok := ret.Get(0).(func() TImport); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TImport)
		}
	}
	return r0
}

// C provides a mock function for the type ReplaceGeneric
func (_mock *ReplaceGeneric[TImport, TConstraint, TKeep]) C() TConstraint {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 TConstraint
	if returnFunc, ok := ret.Get(0).(func() TConstraint); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TConstraint)
		}
	}
	return r0
}

type ReplaceGeneric_expecter[TImport any, TConstraint constraints.Signed, TKeep any] struct {
	mock *mock.Mock
}

func (_m *ReplaceGeneric[TImport, TConstraint, TKeep]) EXPECT() *ReplaceGeneric_expecter[TImport, TConstraint, TKeep] {
	return &ReplaceGeneric_expecter[TImport, TConstraint, TKeep]{mock: &_m.Mock}
}
