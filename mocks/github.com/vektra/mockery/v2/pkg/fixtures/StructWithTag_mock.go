// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewStructWithTag creates a new instance of StructWithTag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStructWithTag(t interface {
	mock.TestingT
	Cleanup(func())
}) *StructWithTag {
	mock := &StructWithTag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StructWithTag is an autogenerated mock type for the StructWithTag type
type StructWithTag struct {
	mock.Mock
}

type StructWithTag_Expecter struct {
	mock *mock.Mock
}

func (_m *StructWithTag) EXPECT() *StructWithTag_Expecter {
	return &StructWithTag_Expecter{mock: &_m.Mock}
}

// MethodA provides a mock function for the type StructWithTag
func (_mock *StructWithTag) MethodA(v *struct {
	FieldA int "json:\"field_a\""
	FieldB int "json:\"field_b\" xml:\"field_b\""
}) *struct {
	FieldC int "json:\"field_c\""
	FieldD int "json:\"field_d\" xml:\"field_d\""
} {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for MethodA")
	}

	var r0 *struct {
		FieldC int "json:\"field_c\""
		FieldD int "json:\"field_d\" xml:\"field_d\""
	}
	if returnFunc, ok := ret.Get(0).(func(*struct {
		FieldA int "json:\"field_a\""
		FieldB int "json:\"field_b\" xml:\"field_b\""
	}) *struct {
		FieldC int "json:\"field_c\""
		FieldD int "json:\"field_d\" xml:\"field_d\""
	}); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*struct {
				FieldC int "json:\"field_c\""
				FieldD int "json:\"field_d\" xml:\"field_d\""
			})
		}
	}
	return r0
}

// StructWithTag_MethodA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MethodA'
type StructWithTag_MethodA_Call struct {
	*mock.Call
}

// MethodA is a helper method to define mock.On call
//   - v
func (_e *StructWithTag_Expecter) MethodA(v interface{}) *StructWithTag_MethodA_Call {
	return &StructWithTag_MethodA_Call{Call: _e.mock.On("MethodA", v)}
}

func (_c *StructWithTag_MethodA_Call) Run(run func(v *struct {
	FieldA int "json:\"field_a\""
	FieldB int "json:\"field_b\" xml:\"field_b\""
})) *StructWithTag_MethodA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(v)
	})
	return _c
}

func (_c *StructWithTag_MethodA_Call) Return(valOut *struct {
	FieldC int "json:\"field_c\""
	FieldD int "json:\"field_d\" xml:\"field_d\""
}) *StructWithTag_MethodA_Call {
	_c.Call.Return(valOut)
	return _c
}

func (_c *StructWithTag_MethodA_Call) RunAndReturn(run func(v *struct {
	FieldA int "json:\"field_a\""
	FieldB int "json:\"field_b\" xml:\"field_b\""
}) *struct {
	FieldC int "json:\"field_c\""
	FieldD int "json:\"field_d\" xml:\"field_d\""
}) *StructWithTag_MethodA_Call {
	_c.Call.Return(run)
	return _c
}
