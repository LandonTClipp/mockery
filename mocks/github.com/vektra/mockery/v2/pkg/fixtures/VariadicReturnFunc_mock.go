// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewVariadicReturnFunc creates a new instance of VariadicReturnFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVariadicReturnFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *VariadicReturnFunc {
	mock := &VariadicReturnFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VariadicReturnFunc is an autogenerated mock type for the VariadicReturnFunc type
type VariadicReturnFunc struct {
	mock.Mock
}

// SampleMethod provides a mock function for the type VariadicReturnFunc
func (_mock *VariadicReturnFunc) SampleMethod(str string) func(str string, arr []int, a ...interface{}) {
	ret := _mock.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for SampleMethod")
	}

	var r0 func(str string, arr []int, a ...interface{})
	if returnFunc, ok := ret.Get(0).(func(string) func(str string, arr []int, a ...interface{})); ok {
		r0 = returnFunc(str)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(str string, arr []int, a ...interface{}))
		}
	}
	return r0
}

type VariadicReturnFunc_expecter struct {
	mock *mock.Mock
}

func (_m *VariadicReturnFunc) EXPECT() *VariadicReturnFunc_expecter {
	return &VariadicReturnFunc_expecter{mock: &_m.Mock}
}
