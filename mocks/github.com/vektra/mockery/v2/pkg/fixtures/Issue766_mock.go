// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewIssue766 creates a new instance of Issue766. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssue766(t interface {
	mock.TestingT
	Cleanup(func())
}) *Issue766 {
	mock := &Issue766{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Issue766 is an autogenerated mock type for the Issue766 type
type Issue766 struct {
	mock.Mock
}

// FetchData provides a mock function for the type Issue766
func (_mock *Issue766) FetchData(fetchFunc func(x ...int) ([]int, error)) ([]int, error) {
	ret := _mock.Called(fetchFunc)

	if len(ret) == 0 {
		panic("no return value specified for FetchData")
	}

	var r0 []int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(func(x ...int) ([]int, error)) ([]int, error)); ok {
		return returnFunc(fetchFunc)
	}
	if returnFunc, ok := ret.Get(0).(func(func(x ...int) ([]int, error)) []int); ok {
		r0 = returnFunc(fetchFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(func(x ...int) ([]int, error)) error); ok {
		r1 = returnFunc(fetchFunc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

type Issue766_expecter struct {
	mock *mock.Mock
}

func (_m *Issue766) EXPECT() *Issue766_expecter {
	return &Issue766_expecter{mock: &_m.Mock}
}
