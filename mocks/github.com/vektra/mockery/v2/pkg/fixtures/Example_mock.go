// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
	number_dir_http "github.com/vektra/mockery/v2/pkg/fixtures/12345678/http"
	my_http "github.com/vektra/mockery/v2/pkg/fixtures/http"
)

// NewExample creates a new instance of Example. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExample(t interface {
	mock.TestingT
	Cleanup(func())
}) *Example {
	mock := &Example{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Example is an autogenerated mock type for the Example type
type Example struct {
	mock.Mock
}

// A provides a mock function for the type Example
func (_mock *Example) A() http.Flusher {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for A")
	}

	var r0 http.Flusher
	if returnFunc, ok := ret.Get(0).(func() http.Flusher); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Flusher)
		}
	}
	return r0
}

// B provides a mock function for the type Example
func (_mock *Example) B(fixtureshttp string) my_http.MyStruct {
	ret := _mock.Called(fixtureshttp)

	if len(ret) == 0 {
		panic("no return value specified for B")
	}

	var r0 my_http.MyStruct
	if returnFunc, ok := ret.Get(0).(func(string) my_http.MyStruct); ok {
		r0 = returnFunc(fixtureshttp)
	} else {
		r0 = ret.Get(0).(my_http.MyStruct)
	}
	return r0
}

// C provides a mock function for the type Example
func (_mock *Example) C(fixtureshttp string) number_dir_http.MyStruct {
	ret := _mock.Called(fixtureshttp)

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 number_dir_http.MyStruct
	if returnFunc, ok := ret.Get(0).(func(string) number_dir_http.MyStruct); ok {
		r0 = returnFunc(fixtureshttp)
	} else {
		r0 = ret.Get(0).(number_dir_http.MyStruct)
	}
	return r0
}

type Example_expecter struct {
	mock *mock.Mock
}

func (_m *Example) EXPECT() *Example_expecter {
	return &Example_expecter{mock: &_m.Mock}
}
