// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewReplaceGenericSelf creates a new instance of ReplaceGenericSelf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplaceGenericSelf[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplaceGenericSelf[T] {
	mock := &ReplaceGenericSelf[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ReplaceGenericSelf is an autogenerated mock type for the ReplaceGenericSelf type
type ReplaceGenericSelf[T any] struct {
	mock.Mock
}

type ReplaceGenericSelf_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *ReplaceGenericSelf[T]) EXPECT() *ReplaceGenericSelf_Expecter[T] {
	return &ReplaceGenericSelf_Expecter[T]{mock: &_m.Mock}
}

// A provides a mock function for the type ReplaceGenericSelf
func (_mock *ReplaceGenericSelf[T]) A() T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for A")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// ReplaceGenericSelf_A_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'A'
type ReplaceGenericSelf_A_Call[T any] struct {
	*mock.Call
}

// A is a helper method to define mock.On call
func (_e *ReplaceGenericSelf_Expecter[T]) A() *ReplaceGenericSelf_A_Call[T] {
	return &ReplaceGenericSelf_A_Call[T]{Call: _e.mock.On("A")}
}

func (_c *ReplaceGenericSelf_A_Call[T]) Run(run func()) *ReplaceGenericSelf_A_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReplaceGenericSelf_A_Call[T]) Return(vOut T) *ReplaceGenericSelf_A_Call[T] {
	_c.Call.Return(vOut)
	return _c
}

func (_c *ReplaceGenericSelf_A_Call[T]) RunAndReturn(run func() T) *ReplaceGenericSelf_A_Call[T] {
	_c.Call.Return(run)
	return _c
}
