// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewConsulLock creates a new instance of ConsulLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsulLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsulLock {
	mock := &ConsulLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConsulLock is an autogenerated mock type for the ConsulLock type
type ConsulLock struct {
	mock.Mock
}

// Lock provides a mock function for the type ConsulLock
func (_mock *ConsulLock) Lock(valCh <-chan struct{}) (<-chan struct{}, error) {
	ret := _mock.Called(valCh)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 <-chan struct{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {
		return returnFunc(valCh)
	}
	if returnFunc, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {
		r0 = returnFunc(valCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(<-chan struct{}) error); ok {
		r1 = returnFunc(valCh)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Unlock provides a mock function for the type ConsulLock
func (_mock *ConsulLock) Unlock() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unlock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

type ConsulLock_expecter struct {
	mock *mock.Mock
}

func (_m *ConsulLock) EXPECT() *ConsulLock_expecter {
	return &ConsulLock_expecter{mock: &_m.Mock}
}
