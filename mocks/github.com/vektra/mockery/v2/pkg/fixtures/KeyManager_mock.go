// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// NewKeyManager creates a new instance of KeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyManager {
	mock := &KeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// KeyManager is an autogenerated mock type for the KeyManager type
type KeyManager struct {
	mock.Mock
}

// GetKey provides a mock function for the type KeyManager
func (_mock *KeyManager) GetKey(s string, v uint16) ([]byte, *test.Err) {
	ret := _mock.Called(s, v)

	if len(ret) == 0 {
		panic("no return value specified for GetKey")
	}

	var r0 []byte
	var r1 *test.Err
	if returnFunc, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {
		return returnFunc(s, v)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uint16) []byte); ok {
		r0 = returnFunc(s, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {
		r1 = returnFunc(s, v)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*test.Err)
		}
	}
	return r0, r1
}

type KeyManager_expecter struct {
	mock *mock.Mock
}

func (_m *KeyManager) EXPECT() *KeyManager_expecter {
	return &KeyManager_expecter{mock: &_m.Mock}
}
