// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/vektra/mockery/v2/pkg/fixtures/constraints"
)

// NewEmbeddedGet creates a new instance of EmbeddedGet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmbeddedGet[T constraints.Signed](t interface {
	mock.TestingT
	Cleanup(func())
}) *EmbeddedGet[T] {
	mock := &EmbeddedGet[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EmbeddedGet is an autogenerated mock type for the EmbeddedGet type
type EmbeddedGet[T constraints.Signed] struct {
	mock.Mock
}

// Get provides a mock function for the type EmbeddedGet
func (_mock *EmbeddedGet[T]) Get() T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

type EmbeddedGet_expecter[T constraints.Signed] struct {
	mock *mock.Mock
}

func (_m *EmbeddedGet[T]) EXPECT() *EmbeddedGet_expecter[T] {
	return &EmbeddedGet_expecter[T]{mock: &_m.Mock}
}
