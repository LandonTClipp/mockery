// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package test

import (
	"sync"
)

// ReplaceGenericSelfMock is a mock implementation of test.ReplaceGenericSelf.
//
//	func TestSomethingThatUsesReplaceGenericSelf(t *testing.T) {
//
//		// make and configure a mocked test.ReplaceGenericSelf
//		mockedReplaceGenericSelf := &ReplaceGenericSelfMock{
//			AFunc: func() T {
//				panic("mock out the A method")
//			},
//		}
//
//		// use mockedReplaceGenericSelf in code that requires test.ReplaceGenericSelf
//		// and then make assertions.
//
//	}
type ReplaceGenericSelfMock[T any] struct {
	// AFunc mocks the A method.
	AFunc func() T

	// calls tracks calls to the methods.
	calls struct {
		// A holds details about calls to the A method.
		A []struct {
		}
	}
	lockA sync.RWMutex
}

// A calls AFunc.
func (mock *ReplaceGenericSelfMock[T]) A() T {
	if mock.AFunc == nil {
		panic("ReplaceGenericSelfMock.AFunc: method is nil but ReplaceGenericSelf.A was just called")
	}
	callInfo := struct {
	}{}
	mock.lockA.Lock()
	mock.calls.A = append(mock.calls.A, callInfo)
	mock.lockA.Unlock()
	return mock.AFunc()
}

// ACalls gets all the calls that were made to A.
// Check the length with:
//
//	len(mockedReplaceGenericSelf.ACalls())
func (mock *ReplaceGenericSelfMock[T]) ACalls() []struct {
} {
	var calls []struct {
	}
	mock.lockA.RLock()
	calls = mock.calls.A
	mock.lockA.RUnlock()
	return calls
}

// ResetACalls reset all the calls that were made to A.
func (mock *ReplaceGenericSelfMock[T]) ResetACalls() {
	mock.lockA.Lock()
	mock.calls.A = nil
	mock.lockA.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *ReplaceGenericSelfMock[T]) ResetCalls() {
	mock.lockA.Lock()
	mock.calls.A = nil
	mock.lockA.Unlock()
}
