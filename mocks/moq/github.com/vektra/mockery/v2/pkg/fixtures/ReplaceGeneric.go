// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package test

import (
	"sync"

	"github.com/vektra/mockery/v2/pkg/fixtures/constraints"
)

// ReplaceGenericMock is a mock implementation of test.ReplaceGeneric.
//
//	func TestSomethingThatUsesReplaceGeneric(t *testing.T) {
//
//		// make and configure a mocked test.ReplaceGeneric
//		mockedReplaceGeneric := &ReplaceGenericMock{
//			AFunc: func(t1 TImport) TKeep {
//				panic("mock out the A method")
//			},
//			BFunc: func() TImport {
//				panic("mock out the B method")
//			},
//			CFunc: func() TConstraint {
//				panic("mock out the C method")
//			},
//		}
//
//		// use mockedReplaceGeneric in code that requires test.ReplaceGeneric
//		// and then make assertions.
//
//	}
type ReplaceGenericMock[TImport any, TConstraint constraints.Signed, TKeep any] struct {
	// AFunc mocks the A method.
	AFunc func(t1 TImport) TKeep

	// BFunc mocks the B method.
	BFunc func() TImport

	// CFunc mocks the C method.
	CFunc func() TConstraint

	// calls tracks calls to the methods.
	calls struct {
		// A holds details about calls to the A method.
		A []struct {
			// T1 is the t1 argument value.
			T1 TImport
		}
		// B holds details about calls to the B method.
		B []struct {
		}
		// C holds details about calls to the C method.
		C []struct {
		}
	}
	lockA sync.RWMutex
	lockB sync.RWMutex
	lockC sync.RWMutex
}

// A calls AFunc.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) A(t1 TImport) TKeep {
	if mock.AFunc == nil {
		panic("ReplaceGenericMock.AFunc: method is nil but ReplaceGeneric.A was just called")
	}
	callInfo := struct {
		T1 TImport
	}{
		T1: t1,
	}
	mock.lockA.Lock()
	mock.calls.A = append(mock.calls.A, callInfo)
	mock.lockA.Unlock()
	return mock.AFunc(t1)
}

// ACalls gets all the calls that were made to A.
// Check the length with:
//
//	len(mockedReplaceGeneric.ACalls())
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) ACalls() []struct {
	T1 TImport
} {
	var calls []struct {
		T1 TImport
	}
	mock.lockA.RLock()
	calls = mock.calls.A
	mock.lockA.RUnlock()
	return calls
}

// ResetACalls reset all the calls that were made to A.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) ResetACalls() {
	mock.lockA.Lock()
	mock.calls.A = nil
	mock.lockA.Unlock()
}

// B calls BFunc.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) B() TImport {
	if mock.BFunc == nil {
		panic("ReplaceGenericMock.BFunc: method is nil but ReplaceGeneric.B was just called")
	}
	callInfo := struct {
	}{}
	mock.lockB.Lock()
	mock.calls.B = append(mock.calls.B, callInfo)
	mock.lockB.Unlock()
	return mock.BFunc()
}

// BCalls gets all the calls that were made to B.
// Check the length with:
//
//	len(mockedReplaceGeneric.BCalls())
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) BCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockB.RLock()
	calls = mock.calls.B
	mock.lockB.RUnlock()
	return calls
}

// ResetBCalls reset all the calls that were made to B.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) ResetBCalls() {
	mock.lockB.Lock()
	mock.calls.B = nil
	mock.lockB.Unlock()
}

// C calls CFunc.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) C() TConstraint {
	if mock.CFunc == nil {
		panic("ReplaceGenericMock.CFunc: method is nil but ReplaceGeneric.C was just called")
	}
	callInfo := struct {
	}{}
	mock.lockC.Lock()
	mock.calls.C = append(mock.calls.C, callInfo)
	mock.lockC.Unlock()
	return mock.CFunc()
}

// CCalls gets all the calls that were made to C.
// Check the length with:
//
//	len(mockedReplaceGeneric.CCalls())
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) CCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockC.RLock()
	calls = mock.calls.C
	mock.lockC.RUnlock()
	return calls
}

// ResetCCalls reset all the calls that were made to C.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) ResetCCalls() {
	mock.lockC.Lock()
	mock.calls.C = nil
	mock.lockC.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *ReplaceGenericMock[TImport, TConstraint, TKeep]) ResetCalls() {
	mock.lockA.Lock()
	mock.calls.A = nil
	mock.lockA.Unlock()

	mock.lockB.Lock()
	mock.calls.B = nil
	mock.lockB.Unlock()

	mock.lockC.Lock()
	mock.calls.C = nil
	mock.lockC.Unlock()
}
