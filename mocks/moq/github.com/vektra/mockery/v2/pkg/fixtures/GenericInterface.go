// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package test

import (
	"sync"
)

// GenericInterfaceMock is a mock implementation of test.GenericInterface.
//
//	func TestSomethingThatUsesGenericInterface(t *testing.T) {
//
//		// make and configure a mocked test.GenericInterface
//		mockedGenericInterface := &GenericInterfaceMock{
//			FuncFunc: func(arg *M) int {
//				panic("mock out the Func method")
//			},
//		}
//
//		// use mockedGenericInterface in code that requires test.GenericInterface
//		// and then make assertions.
//
//	}
type GenericInterfaceMock[M any] struct {
	// FuncFunc mocks the Func method.
	FuncFunc func(arg *M) int

	// calls tracks calls to the methods.
	calls struct {
		// Func holds details about calls to the Func method.
		Func []struct {
			// Arg is the arg argument value.
			Arg *M
		}
	}
	lockFunc sync.RWMutex
}

// Func calls FuncFunc.
func (mock *GenericInterfaceMock[M]) Func(arg *M) int {
	if mock.FuncFunc == nil {
		panic("GenericInterfaceMock.FuncFunc: method is nil but GenericInterface.Func was just called")
	}
	callInfo := struct {
		Arg *M
	}{
		Arg: arg,
	}
	mock.lockFunc.Lock()
	mock.calls.Func = append(mock.calls.Func, callInfo)
	mock.lockFunc.Unlock()
	return mock.FuncFunc(arg)
}

// FuncCalls gets all the calls that were made to Func.
// Check the length with:
//
//	len(mockedGenericInterface.FuncCalls())
func (mock *GenericInterfaceMock[M]) FuncCalls() []struct {
	Arg *M
} {
	var calls []struct {
		Arg *M
	}
	mock.lockFunc.RLock()
	calls = mock.calls.Func
	mock.lockFunc.RUnlock()
	return calls
}

// ResetFuncCalls reset all the calls that were made to Func.
func (mock *GenericInterfaceMock[M]) ResetFuncCalls() {
	mock.lockFunc.Lock()
	mock.calls.Func = nil
	mock.lockFunc.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *GenericInterfaceMock[M]) ResetCalls() {
	mock.lockFunc.Lock()
	mock.calls.Func = nil
	mock.lockFunc.Unlock()
}
