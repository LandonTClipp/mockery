// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package test

import (
	"sync"
)

// Issue766Mock is a mock implementation of test.Issue766.
//
//	func TestSomethingThatUsesIssue766(t *testing.T) {
//
//		// make and configure a mocked test.Issue766
//		mockedIssue766 := &Issue766Mock{
//			FetchDataFunc: func(fetchFunc func(x ...int) ([]int, error)) ([]int, error) {
//				panic("mock out the FetchData method")
//			},
//		}
//
//		// use mockedIssue766 in code that requires test.Issue766
//		// and then make assertions.
//
//	}
type Issue766Mock struct {
	// FetchDataFunc mocks the FetchData method.
	FetchDataFunc func(fetchFunc func(x ...int) ([]int, error)) ([]int, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchData holds details about calls to the FetchData method.
		FetchData []struct {
			// FetchFunc is the fetchFunc argument value.
			FetchFunc func(x ...int) ([]int, error)
		}
	}
	lockFetchData sync.RWMutex
}

// FetchData calls FetchDataFunc.
func (mock *Issue766Mock) FetchData(fetchFunc func(x ...int) ([]int, error)) ([]int, error) {
	if mock.FetchDataFunc == nil {
		panic("Issue766Mock.FetchDataFunc: method is nil but Issue766.FetchData was just called")
	}
	callInfo := struct {
		FetchFunc func(x ...int) ([]int, error)
	}{
		FetchFunc: fetchFunc,
	}
	mock.lockFetchData.Lock()
	mock.calls.FetchData = append(mock.calls.FetchData, callInfo)
	mock.lockFetchData.Unlock()
	return mock.FetchDataFunc(fetchFunc)
}

// FetchDataCalls gets all the calls that were made to FetchData.
// Check the length with:
//
//	len(mockedIssue766.FetchDataCalls())
func (mock *Issue766Mock) FetchDataCalls() []struct {
	FetchFunc func(x ...int) ([]int, error)
} {
	var calls []struct {
		FetchFunc func(x ...int) ([]int, error)
	}
	mock.lockFetchData.RLock()
	calls = mock.calls.FetchData
	mock.lockFetchData.RUnlock()
	return calls
}

// ResetFetchDataCalls reset all the calls that were made to FetchData.
func (mock *Issue766Mock) ResetFetchDataCalls() {
	mock.lockFetchData.Lock()
	mock.calls.FetchData = nil
	mock.lockFetchData.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *Issue766Mock) ResetCalls() {
	mock.lockFetchData.Lock()
	mock.calls.FetchData = nil
	mock.lockFetchData.Unlock()
}
